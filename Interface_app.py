import streamlit as st
import pandas as pd
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import LabelEncoder


# --- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ---
sheet_url = "https://docs.google.com/spreadsheets/d/1ENpJYa3tnNrv6BBZJFG9pDNUTDqkbP7RQyBnA6pKSLI/edit#gid=0"
csv_url = sheet_url.replace("/edit#gid=", "/export?format=csv&gid=")

@st.cache_data
def load_data(url):
    return pd.read_csv(url)

df = load_data(csv_url)

# === ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏ ===
col_name = {
    "name": "‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô",
    "location": "‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì",
    "budget": "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì",
    "tto": "‡πÄ‡∏ß‡∏•‡∏≤",
    "type1": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 1",
    "type2": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 2"
}

# === UI ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ===
st.header("üçΩÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ KNN")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
st.write("üß™ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:", df.columns.tolist())
all_types = pd.unique(pd.concat([df[col_name["type1"]], df[col_name["type2"]]]).dropna())

user_location = st.selectbox("üìç ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", df[col_name["location"]].dropna().unique())
user_type = st.selectbox("üç± ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", all_types)
user_budget = st.selectbox("üí∏ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", df[col_name["budget"]].dropna().unique())
user_time = st.selectbox("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤", df[col_name["tto"]].dropna().unique())

# === ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö type1 ‡∏´‡∏£‡∏∑‡∏≠ type2 ===
filtered_df = df[
    (df[col_name["type1"]] == user_type) | 
    (df[col_name["type2"]] == user_type)
]

# === ‡∏Å‡∏£‡∏≠‡∏á‡∏à‡∏≤‡∏Å location, budget, tto ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ===
filtered_df = filtered_df[
    (filtered_df[col_name["location"]] == user_location) &
    (filtered_df[col_name["budget"]] == user_budget) &
    (filtered_df[col_name["tto"]] == user_time)
]

# === ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ó‡∏≥ KNN ===
if not filtered_df.empty:
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö KNN
    features = filtered_df[[col_name["location"], col_name["budget"], col_name["tto"], col_name["type1"], col_name["type2"]]].copy()

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ LabelEncoder
    encoders = {}
    for col in features.columns:
        enc = LabelEncoder()
        features[col] = enc.fit_transform(features[col])
        encoders[col] = enc

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    user_input = pd.DataFrame([{
        col_name["location"]: user_location,
        col_name["budget"]: user_budget,
        col_name["tto"]: user_time,
        col_name["type1"]: user_type,
        col_name["type2"]: user_type  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ type1 ‡∏Å‡∏±‡∏ö type2 ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
    }])

    for col in user_input.columns:
        user_input[col] = encoders[col].transform(user_input[col])

    # ‡∏ù‡∏∂‡∏Å KNN ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    knn = NearestNeighbors(n_neighbors=min(5, len(features)), metric='euclidean')
    knn.fit(features)

    distances, indices = knn.kneighbors(user_input)

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    st.subheader("‚úÖ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    for idx in indices[0]:
        row = filtered_df.iloc[idx]
        st.markdown(f"- **{row[col_name['name']]}** ({row[col_name['type1']]} / {row[col_name['type2']]})")

else:
    st.warning("üò• ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
    st.button("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡πÉ‡∏à")

if st.button("üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"):
    st.experimental_rerun()
