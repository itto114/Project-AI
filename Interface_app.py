import streamlit as st
import pandas as pd
import random
import gspread
from oauth2client.service_account import ServiceAccountCredentials


# --- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å ---
LOCATIONS = ["‡∏õ‡∏£‡∏∞‡∏ï‡∏π1", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π2", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π3", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π4"]
BUDGETS = ["‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤50", "50 - 100", "100 - 200", "200+"]
TYPES = ["‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏µ‡∏™‡∏≤‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πâ‡∏°‡∏ï‡∏≥ ‡∏•‡∏≤‡∏ö ‡∏Å‡πâ‡∏≠‡∏¢)", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Å‡∏≤‡∏´‡∏•‡∏µ", "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô"]
TIMES = ["‡πÄ‡∏ä‡πâ‡∏≤ (‡∏Å‡πà‡∏≠‡∏ô 10 ‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤)", "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (10‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤ - 4‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô)", "‡πÄ‡∏¢‡πá‡∏ô (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 4 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô)"]

# --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á) ---
data = [
    {"name": "‡∏£‡πâ‡∏≤‡∏ô A", "location": "‡∏õ‡∏£‡∏∞‡∏ï‡∏π1", "budget": "50 - 100", "type_1": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "time_to_open": "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (10‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤ - 4‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô)", "url": "https://abc.com/a"},
    {"name": "‡∏£‡πâ‡∏≤‡∏ô B", "location": "‡∏õ‡∏£‡∏∞‡∏ï‡∏π1", "budget": "50 - 100", "type_1": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "time_to_open": "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (10‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤ - 4‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô)", "url": "https://abc.com/b"},
    {"name": "‡∏£‡πâ‡∏≤‡∏ô C", "location": "‡∏õ‡∏£‡∏∞‡∏ï‡∏π2", "budget": "100 - 200", "type_1": "‡∏õ‡∏¥‡πâ‡∏á‡∏¢‡πà‡∏≤‡∏á", "time_to_open": "‡πÄ‡∏¢‡πá‡∏ô (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 4 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô)", "url": "https://abc.com/c"},
    {"name": "‡∏£‡πâ‡∏≤‡∏ô D", "location": "‡∏õ‡∏£‡∏∞‡∏ï‡∏π3", "budget": "200+", "type_1": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô", "time_to_open": "‡πÄ‡∏¢‡πá‡∏ô (‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 4 ‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô)", "url": "https://abc.com/d"},
    {"name": "‡∏£‡πâ‡∏≤‡∏ô E", "location": "‡∏õ‡∏£‡∏∞‡∏ï‡∏π1", "budget": "50 - 100", "type_1": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á", "time_to_open": "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô (10‡πÇ‡∏°‡∏á‡πÄ‡∏ä‡πâ‡∏≤ - 4‡πÇ‡∏°‡∏á‡πÄ‡∏¢‡πá‡∏ô)", "url": "https://abc.com/e"}
]
df = pd.DataFrame(data)

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ---
def send_log_to_sheet(action, user_location, user_type, user_budget, user_time, result):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("config/credentials.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("MealMatch").sheet1
        sheet.append_row([action, user_location, user_type, user_budget, user_time, result])
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á Google Sheet: {e}")

# --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡πà‡∏≤ session_state ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ---
if 'step' not in st.session_state:
    st.session_state.step = 1
if 'history' not in st.session_state:
    st.session_state.history = []

# === ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢ ===
if st.session_state.step == 1:
    st.header("üçΩÔ∏è ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£")

    user_location = st.selectbox("üìç ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£", LOCATIONS)
    user_type = st.selectbox("üç± ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏≤‡∏´‡∏≤‡∏£", TYPES)
    user_budget = st.selectbox("üí∏ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", BUDGETS)
    user_time = st.selectbox("‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡πÑ‡∏õ (‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î)", TIMES)

    if st.button("üîç ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"):
        filtered_df = df[
            (df["type_1"] == user_type) &
            (df["location"] == user_location) &
            (df["budget"] == user_budget) &
            (df["time_to_open"] == user_time)
        ]
        st.session_state.filtered_df = filtered_df
        st.session_state.user_location = user_location
        st.session_state.user_type = user_type
        st.session_state.user_budget = user_budget
        st.session_state.user_time = user_time
        st.session_state.step = 2

    st.markdown("---")
    st.subheader("üî• ‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì")
    for rec in random.sample(data, 2):
        st.markdown(f"**{rec['name']}** ‚Äî {rec['type_1']} | {rec['budget']} | {rec['location']} | {rec['time_to_open']}")

# === ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (checkbox version) ===
elif st.session_state.step == 2:
    st.subheader("üç¥ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")

    filtered_df = st.session_state.filtered_df
    user_location = st.session_state.user_location
    user_type = st.session_state.user_type
    user_budget = st.session_state.user_budget
    user_time = st.session_state.user_time

    if not filtered_df.empty:
        selected_restaurants = []
        for row in filtered_df.itertuples():
            checked = st.checkbox(
                label=f"üè™ {row.name}\n\nüìå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {row.type_1}\nüìç ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì: {row.location}\nüí∏ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {row.budget}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î: {row.time_to_open}",
                key=f"chk_{row.name}"
            )
            if checked:
                selected_restaurants.append(row.name)

        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ"):
                if selected_restaurants:
                    st.session_state.selected_restaurant = selected_restaurants
                    st.session_state.history.extend(selected_restaurants)
                    for sel in selected_restaurants:
                        send_log_to_sheet("Selected", user_location, user_type, user_budget, user_time, sel)
                    st.session_state.step = 3
        with col2:
            if st.button("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô‡∏ñ‡∏π‡∏Å‡πÉ‡∏à"):
                st.session_state.selected_restaurant = []
                send_log_to_sheet("No Match", user_location, user_type, user_budget, user_time, "None")
                st.session_state.step = 3
    else:
        st.warning("üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
        if st.button("üîô ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà"):
            st.session_state.step = 1

# === ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ===
elif st.session_state.step == 3:
    st.subheader("üôè ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£!")

    if st.session_state.get('selected_restaurant'):
        for selected_name in st.session_state.selected_restaurant:
            selected_row = df[df['name'] == selected_name].iloc[0]
            st.success(f"üéâ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô: **{selected_name}**")
            st.markdown(f"üìå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {selected_row['type_1']}")
            st.markdown(f"üìç ‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì: {selected_row['location']}")
            st.markdown(f"üí∏ ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {selected_row['budget']}")
            st.markdown(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î: {selected_row['time_to_open']}")
            st.markdown(f"üîó [‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°]({selected_row['url']})")
    else:
        st.info("üòï ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏ô‡∏ï‡∏£‡∏á‡πÉ‡∏à‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏µ‡πâ")

    if st.session_state.history:
        st.markdown("---")
        st.subheader("üïò ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤")
        for hist_name in st.session_state.history:
            row = df[df['name'] == hist_name].iloc[0]
            st.markdown(f"- **{hist_name}** ‚Äî {row['type_1']}, {row['location']}, {row['budget']}, {row['time_to_open']}")

    if st.button("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
